#!/usr/bin/env jruby
$LOAD_PATH.unshift(File.expand_path('./lib'), File.dirname(__FILE__))
require 'schematronium'

raise "Not enough arguments" if ARGV.length < 2

as_checker = Schematronium.new(ARGV.shift)

@fnames = []

if ARGV.empty?
  @fnames = @fnames + Dir[File.join('.', "*.xml")]
else
  ARGV.each do |arg|
    # Because absolute_path doesn't work right? Investigate
    arg = arg.sub(/~/, Dir.home)

    @fnames += case File.absolute_path(arg)
               when File.method(:directory?).to_proc
                 Dir[File.join(File.absolute_path(arg), "*.xml")]
               when File.method(:file?).to_proc
                 [File.absolute_path(arg)]
               else
                 []
               end
  end
end

puts '<?xml version="1.0" encoding="UTF-8"?><files>'
@fnames.each do |f|
  $stderr.write "Processing '#{f}'..."
  xml = as_checker.check(File.read(f))
  output = Nokogiri::XML::DocumentFragment.new(Nokogiri::XML::Document.new)

  file = output.add_child("<file id='#{f}' total_errors='#{xml.count}'/>").first
  counts = xml.group_by {|el| el.children.map(&:text).join.strip.gsub(/\s+/, ' ')}.map {|k,v| [k,v.count]}.to_h
  err_count = file.add_child("<error_counts />").first
  counts.each do |k,v|
    err_count.add_child("<message count='#{v}'>#{k}</message>")
  end
  errs = file.add_child("<errors />").first
  errs.children = xml

  puts output

  $stderr.write " Finished\n"
end

puts '</files>'
